#!/usr/bin/env python3

import os
import argparse
import pathlib
import vitis
import vitis0
import vitis_rtl
import re
import xml.etree.ElementTree as ElementTree


class DesignInfo:
    def __init__(self, solution):
        self.__context = vitis.Context()
        self.__solution = solution
        self.__parse_design_xml()
        self.__parse_llvm_bc()
        self.__parse_state_transition(self.top_name)
        self.__parse_rtl()
        self.__parse_debug_bc()

    def __parse_design_xml(self):
        xml_files = list(pathlib.Path(self.__solution).rglob("*.design.xml"))
        assert len(xml_files) == 1, "Only one design allowed in the solution"
        xml_file = xml_files[0]
        # parse the xml file to build design hierarchy
        # also set the top name
        filename = os.path.basename(xml_file)
        self.top_name = filename.replace(".design.xml", "")
        self.__context.top_name = self.top_name
        tree = ElementTree.parse(xml_file)
        root = tree.getroot()
        top_module = root.find("./RTLDesignHierarchy/TopModule")
        top_module_name = top_module.find("ModuleName").text
        assert top_module_name == self.top_name, "Design database files corrupted"
        self.top_module = vitis.ModuleInfo(top_module_name)
        # create top module
        self.__context[top_module_name] = self.top_module
        self.__build_instance_hierarchy(top_module_name, top_module)

    def __parse_debug_bc(self):
        g_filename = os.path.join(self.__solution, ".autopilot", "db", self.top_name + ".bc")
        assert os.path.exists(g_filename), "Debug bitcode not found at " + g_filename
        self.scope_info = vitis0.get_function_scopes(g_filename)

    def __build_instance_hierarchy(self, parent_name, node):
        inst_list = node.find("InstancesList")
        if inst_list is None:
            return
        for child in inst_list.findall("Instance"):
            inst_name = child.find("InstName").text
            module_name = child.find("ModuleName").text
            mod = self.__context[parent_name]
            mod.add_instance(module_name, inst_name)
            # recursive call
            self.__build_instance_hierarchy(module_name, child)

    def __parse_llvm_bc(self):
        # find the nice build with all the debug information
        o3_filename = os.path.join(self.__solution, ".autopilot", "db", "a.o.3.bc")
        assert os.path.exists(o3_filename), "Design bitcode not found"
        self.__o3_bc = vitis.parse_llvm_bitcode(o3_filename)

        # read out the debug build and figure out the call graph
        top_function = self.__o3_bc.get_function(self.top_name)
        assert top_function is not None, "Unable to locate top function in LLVM bitcode"
        function_names = top_function.get_contained_functions()
        # only interested in the functions created from top, which has its name prefixed
        function_names = [name for name in function_names if self.top_name in name]
        # need to compute the demangled name, which is the instance name
        for name in function_names:
            func = self.__o3_bc.get_function(name)
            assert func is not None, "Cannot find function " + name
            module_name = func.demangled_name
            assert module_name in self.__context
            self.__context[module_name].function = func
        self.__context[self.top_name].function = top_function

    @staticmethod
    def __get_lines(module_filename):
        assert os.path.exists(module_filename), "Unable to find file " + module_filename
        with open(module_filename, "r") as f:
            lines = f.readlines()
        return lines

    def __get_xrf_lines(self, module_name):
        xrf_filename = os.path.join(self.__solution, ".debug", module_name + ".xrf")
        return self.__get_lines(xrf_filename)

    def __parse_state_transition(self, module_name):
        # we need to parse state transition for every module since they are independent

        # recursively parse the state transition
        instances = self.__context[module_name].instances
        for m in instances.values():
            # recursively parse it
            self.__parse_state_transition(m.module_name)

        module_state_info = {}
        current_state = None
        rpt_lines = self.__get_xrf_lines(module_name)
        state_header_re = re.compile(r"RTL state condition: \(1'b1 == (?P<name>[\w_\d]+)\)")
        state_loc_re = re.compile(r"'\s<(?P<file>.*):(?P<line>\d+)>")
        for line in rpt_lines:
            m = state_header_re.search(line)
            if m is not None:
                state_name = m.group("name")
                current_state = vitis.StateInfo(state_name)
                module_state_info[state_name] = current_state
            else:
                m = state_loc_re.search(line)
                if m is not None:
                    file = m.group("file")
                    line = int(m.group("line"))
                    current_state.add_instr(file, line)

        self.__context[module_name].state_infos = module_state_info

    def __parse_rtl(self):
        # need to blob all the verilog files
        verilog_dir = os.path.join(self.__solution, "syn", "verilog")
        assert os.path.exists(verilog_dir), "Verilog directory does not exist " + verilog_dir
        files = list(pathlib.Path(verilog_dir).rglob("*.v"))
        files = [str(f) for f in files]
        self.__rtl_info = vitis_rtl.parse_verilog(files, self.top_name)
        self.__context.set_rtl_info(self.__rtl_info.signals, self.__rtl_info.instances, self.__rtl_info.connections)

    def dump_symbol_table(self, output, remap):
        options = vitis.SerializationOptions()
        for b, a in remap.items():
            options.add_mapping(b, a)

        tables = {}
        module_scopes = {}
        modules = self.__context.modules()
        for module_name, module in modules.items():
            function = module.function
            scope = function.get_debug_scope(self.__context, module)
            scope.bind_state(module)
            module_scopes[module_name] = scope

        module_scopes = vitis.reorganize_scopes(self.__o3_bc, self.scope_info, module_scopes)

        for module_name, scope in module_scopes.items():
            tables[module_name] = scope.serialize(options)

        res = "{\"generator\":\"vitis\",\"table\":["
        count = 1
        for module_name, s in tables.items():
            res += "{"
            res += "\"type\":\"module\",\"name\":\"" + module_name + "\",\"scope\":[" + s + "],\"instances\":["
            # generate instances
            instances = self.__context[module_name].instances
            i = 0
            for inst_name, inst in instances.items():
                res += "{\"name\":\"" + inst_name + "\","
                res += "\"module\":\"" + inst.module_name + "\"}"
                if i != ((len(instances)) - 1):
                    res += ","
                i += 1
            # no variables for now since most of them are C functions
            res += "],\"variables\":[]}"
            if count != len(tables):
                res += ","
            count += 1
        res += "],\"top\":\"" + self.top_name + "\""
        # clock attribute
        res += ",\"attributes\":[{\"name\":\"clock\",\"value\":\"" + self.top_name + ".ap_clk\"}]"
        res += "}"

        if output:
            with open(output, "w+") as f:
                f.write(res)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("solution", type=str, help="Xilinx Vitis solution dir")
    parser.add_argument("-o", dest="output", type=str, help="Output symbol table name")
    parser.add_argument("-r", "--remap", dest="remap")
    args = parser.parse_args()
    return args


def strip_end(string, c):
    while string and string[-1] == c:
        string = string[:-1]
    return string


def preprocess_remap(remap):
    if remap is None:
        return {}
    else:
        groups = remap.split(";")
        res = {}
        for m in groups:
            g = m.split(":")
            assert len(g) == 2, "Invalid remap option " + remap
            before_name = g[0]
            after_name = g[1]
            before_name = strip_end(before_name, '/')
            after_name = strip_end(after_name, '/')
            res[before_name] = after_name
        return res


def main():
    args = get_args()
    solution = args.solution
    info = DesignInfo(solution)
    info.dump_symbol_table(args.output, preprocess_remap(args.remap))


if __name__ == "__main__":
    main()
